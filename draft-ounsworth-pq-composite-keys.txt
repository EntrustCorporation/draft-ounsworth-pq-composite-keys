



LAMPS                                              M. Ounsworth (Editor)
Internet-Draft                                                   Entrust
Intended status: Standards Track                                 M. Pala
Expires: August 26, 2022                                       CableLabs
                                                            J. Klaussner
                                                            D-Trust GmbH
                                                       February 22, 2022


       Composite Public and Private Keys For Use In Internet PKI
                  draft-ounsworth-pq-composite-keys-01

Abstract

   With the widespread adoption of post-quantum cryptography will come
   the need for an entity to possess multiple public keys on different
   cryptographic algorithms.  Since the trustworthiness of individual
   post-quantum algorithms is at question, a multi-key cryptographic
   operation will need to be performed in such a way that breaking it
   requires breaking each of the component algorithms individually.
   This requires defining new structures for holding composite keys, for
   use with composite signature and encryption data.

   This document defines the structures CompositePublicKey,
   CompositePrivateKey, which are sequences of the respective structure
   for each component algorithm.  The generic composite mode makes no
   assumptions about what the component algorithms are, provided that
   they have defined algorithm identifiers.  The only requirement
   imposed by this document is that all algorithms be of the same key
   usage; i.e. all signature or all encryption.  This document is
   intended to be coupled with corresponding documents that define the
   structure and semantics of composite signatures and encryption.  This
   document also defines the explicit composite mode which allows for
   AlgorithmIdentifier.algorithm OIDs to be registered which specify an
   explicit combination of algorithms.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any



Ounsworth (Editor), et alExpires August 26, 2022                [Page 1]

Internet-Draft              PQ Composite Keys              February 2022


   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 26, 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  Composite Structures  . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Algorithm Identifiers . . . . . . . . . . . . . . . . . .   5
     2.2.  Composite Keys  . . . . . . . . . . . . . . . . . . . . .   5
       2.2.1.  Key Usage . . . . . . . . . . . . . . . . . . . . . .   5
       2.2.2.  AND, OR, and K-of-N modes . . . . . . . . . . . . . .   6
     2.3.  Composite Public Key  . . . . . . . . . . . . . . . . . .   6
       2.3.1.  Generic Composite Public Key  . . . . . . . . . . . .   7
       2.3.2.  Explicit Composite Public Key . . . . . . . . . . . .   7
     2.4.  Composite Private Key . . . . . . . . . . . . . . . . . .   8
     2.5.  Encoding Rules  . . . . . . . . . . . . . . . . . . . . .   8
   3.  In Practice . . . . . . . . . . . . . . . . . . . . . . . . .   8
     3.1.  Textual encoding of Composite Private Keys  . . . . . . .   9
     3.2.  Asymmetric Key Packages (CMS) . . . . . . . . . . . . . .   9
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  10
     5.1.  Reuse of keys in a Composite public key . . . . . . . . .  10
     5.2.  Policy for Deprecated and Acceptable Algorithms . . . . .  10
     5.3.  Protection of Private Keys  . . . . . . . . . . . . . . .  11
     5.4.  Checking for Compromised Key Reuse  . . . . . . . . . . .  11
   6.  Appendices  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     6.1.  Creating explicit combinations  . . . . . . . . . . . . .  12
     6.2.  ASN.1 Module  . . . . . . . . . . . . . . . . . . . . . .  13
     6.3.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .  15
       6.3.1.  Generic Composite Public Key Examples . . . . . . . .  15



Ounsworth (Editor), et alExpires August 26, 2022                [Page 2]

Internet-Draft              PQ Composite Keys              February 2022


       6.3.2.  Explitic Composite Public Key Examples  . . . . . . .  17
     6.4.  Intellectual Property Considerations  . . . . . . . . . .  18
   7.  Contributors and Acknowledgements . . . . . . . . . . . . . .  18
     7.1.  Making contributions  . . . . . . . . . . . . . . . . . .  19
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  19
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  19
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  20
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  21

1.  Introduction

   During the transition to post-quantum cryptography, there will be
   uncertainty as to the strength of cryptographic algorithms; we will
   no longer fully trust traditional cryptography such as RSA, Diffie-
   Hellman, DSA and their elliptic curve variants, but we will also not
   fully trust their post-quantum replacements until they have had
   sufficient scrutiny.  Unlike previous cryptographic algorithm
   migrations, the choice of when to migrate and which algorithms to
   migrate to, is not so clear.  Even after the migration period, it may
   be advantageous for an entity's cryptographic identity to be composed
   of multiple public-key algorithms.

   The deployment of composite public keys, and composite signatures and
   composite encryption using post-quantum algorithms will face two
   challenges

   o  Algorithm strength uncertainty: During the transition period, some
      post-quantum signature and encryption algorithms will not be fully
      trusted, while also the trust in legacy public key algorithms will
      start to erode.  A relying party may learn some time after
      deployment that a public key algorithm has become untrustworthy,
      but in the interim, they may not know which algorithm an adversary
      has compromised.

   o  Migration: During the transition period, systems will require
      mechanisms that allow for staged migrations from fully classical
      to fully post-quantum-aware cryptography.

   This document provides a mechanism to address both algorithm strength
   uncertainty as well as migration concerns by providing formats for
   encoding multiple public keys and private keys values into existing
   public key and private key fields.

   This document is intended for general applicability anywhere that
   keys are used within PKIX or CMS structures.

   EDNOTE A previous version of this draft specified alternate algorithm
   identifiers for AND and OR modes.  As well, a similar spec by D-Trust



Ounsworth (Editor), et alExpires August 26, 2022                [Page 3]

Internet-Draft              PQ Composite Keys              February 2022


   (now co-authors of this draft) also specified a "K of N" mode.  While
   we still believe that these are valuable modes serving security and
   migration needs, we have removed them from this draft as they are
   really key usage policy and therefore do not belong in the public key
   object defined in this draft.  They remain important parts of
   composite signature algorithms to prevent stripping attacks, and of
   composite encryption algorithms to tell a recipient how to decrypt
   the ciphertext.  If the community decides that this usage information
   should accompany a composite public key, then it should be carried
   either as an X.509 Extended Key Usage or v3 Extension rather than in
   the public key itself.

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The following terms are used in this document:

   ALGORITHM: An information object class for identifying the type of
   cryptographic key being encapsulated.

   BER: Basic Encoding Rules (BER) as defined in [X.690].

   COMPONENT ALGORITHM: A single basic algorithm which is contained
   within a composite algorithm.

   COMPOSITE ALGORITHM: An algorithm which is a sequence of two or more
   component algorithms, as defined in Section 2.

   DER: Distinguished Encoding Rules as defined in [X.690].

   PUBLIC / PRIVATE KEY: The public and private portion of an asymmetric
   cryptographic key, making no assumptions about which algorithm.

2.  Composite Structures

   In order for public keys and private keys to be composed of multiple
   algorithms, we define encodings consisting of a sequence of public
   key or private key primitives (aka "components") such that these
   structures can be used as a drop-in replacement for existing public
   key fields such as those found in PKCS#10 [RFC2986], CMP [RFC4210],
   X.509 [RFC5280], CMS [RFC5652], and the Trust Anchor Format
   [RFC5914].




Ounsworth (Editor), et alExpires August 26, 2022                [Page 4]

Internet-Draft              PQ Composite Keys              February 2022


   This section defines the following structures:

   o  The id-alg-composite is an OID identifying a composite public key.

   o  The CompositePublicKey carries all the public keys associated with
      an identity within a single public key structure.

   o  The CompositePrivateKey carries all the private keys associated
      with an identity within a single private key structure.

2.1.  Algorithm Identifiers

   The Composite-Key algorithm identifier is used for identifying a
   generic public key and a private key.

  id-composite-key OBJECT IDENTIFIER ::= {
    iso(1) identified-organization(3) dod(6) internet(1) private(4)
    enterprise(1) OpenCA(18227) algorithms(2) id-pk-compositeCrypto(1) }

   The Composite-Component-Key algorithm identifier is user for
   idententifying a component within an explicit public key.  ~~~ asn.1
   id-composite-component-key OBJECT IDENTIFIER ::= { TBD } ~~~

   EDNOTE: these are a temporary OIDs for the purposes of prototyping.
   We are requesting IANA to assign a permanent OID, see Section 4.

2.2.  Composite Keys

   A composite key is a single key object that performs an atomic
   signature or verification operation, using its encapsulated sequence
   of component keys.

   The ASN.1 algorithm object for composite public and private keys is:

   pk-Composite PUBLIC-KEY ::= {
       KEY CompositePublicKey
       PARAMS ARE absent
       PRIVATE-KEY CompositePrivateKey
   }

2.2.1.  Key Usage

   For protocols such as X.509 [RFC5280] that specify key usage along
   with the public key, any key usage may be used with Composite keys,
   with the requirement that the specified key usage MUST apply to all
   component keys.  For example if a Composite key is marked with a
   KeyUsage of digitalSignature, then all component keys MUST be capable
   of producing digital signatures. id-alg-composite MUST NOT be used to



Ounsworth (Editor), et alExpires August 26, 2022                [Page 5]

Internet-Draft              PQ Composite Keys              February 2022


   implement mixed-usage keys, for example, where a digitalSignature and
   a keyEncipherment key are combined together into a single Composite
   key object.

2.2.2.  AND, OR, and K-of-N modes

   Once an end entity has been issued multiple public keys, it is easy
   to imagine different modes and policies for using these keys.  For
   example a logical AND would provide the strictest security by
   requiring any usage of a composite key to always use all component
   keys.  Meanwhile, a logical OR would provide the greatest migration
   flexibility by allowing any component key to be used by itself.
   There can also be modes in between the two extremes such as a "K of
   N" mode, or a policy explicitely listing acceptable combinations of
   algorithms.

   While these modes are an important part of composite signature and
   encryption algorithms, they do not affect the structure of the
   composite public and private keys, and are therefore outside the
   scope of this draft.  If the community desires, future versions of
   this draft may define and X.509 extended key usage or v3 extension to
   convey this key usage policy information in an X.509 certificate.

2.3.  Composite Public Key

   Composite public key data is represented by the following structure:

   CompositePublicKey ::= SEQUENCE SIZE (2..MAX) OF SubjectPublicKeyInfo

   The corresponding AlgorithmIdentifier for a composite public key MUST
   use the id-alg-composite object identifier, defined in Section 2.1,
   and the parameters field MUST be absent.

   A composite public key MUST contain at least two component public
   keys.

   A CompositePublicKey MUST NOT contain a component public key which
   itself describes a composite key; i.e. recursive CompositePublicKeys
   are not allowed.

   EDNOTE: unclear that banning recursive composite keys actually
   accomplishes anything other than a general reduction in complexity
   and therefore reduction in attack surface.  In particular, with the
   addition of Composite (AND mode) and Composite-OR (OR mode),
   recursion actually allows full boolean expression.  Is this valuable?

   Each element of a CompositePublicKey is a SubjectPublicKeyInfo object
   encoding a component public key.  When the CompositePublicKey must be



Ounsworth (Editor), et alExpires August 26, 2022                [Page 6]

Internet-Draft              PQ Composite Keys              February 2022


   provided in octet string or bit string format, the data structure is
   encoded as specified in Section 2.5.

2.3.1.  Generic Composite Public Key

   In this mode the PUBLIC-KEY IDENTIFIER SHALL be id-composite-key.
   Each component SubjectPublicKeyInfo SHALL contain an
   AlgorithmIdentifier OID which identifies the public key type and
   params for the public key contained within it.  See Section 6.3.1 for
   examples.

   This mode provides a completely generic structure where key types can
   be combined into arbitrary combinations by runtime agents; ie no OIDs
   need to be assigned beyond id-composite-key and the OIDs for the
   individual component algorithms.

   The motivation for this mode is primarily for prototyping work prior
   to the standardization of algorithm identifiers for explicit
   combinations of algorithms.  However, the authors envision that this
   mode will remain relevant beyond full standardization for example in
   environments requiring very high levels of crypto agility, for
   example where clients support a large number of algorithms or where a
   large number of keys will be used at a time and it is therefore
   prohibitive to define algorithm identifiers for every combination of
   pairs, triples, quadtuples, etc of algorithms.

2.3.2.  Explicit Composite Public Key

   In this mode, he PUBLIC-KEY IDENTIFIER SHALL be and OID which is
   registered to represent a specific combination of component public
   key types.  Each component SubjectPublicKeyInfo SHALL contain an
   AlgorithmIdentifier OID of id-composite-component-key, which is only
   a placeholder to indicate that the type of key needs to be infered by
   the client from the top-level PUBLIC-KEY IDENTIFIER and the order of
   this key within the SEQUENCE.  See Section 6.3.2 for examples.  Also
   see Section 6.1 for guidance on creating and registering OIDs for
   specific explicit combinations.

   This mode provides a rigid way of specifying supported combinations
   of algorithms.

   The motivation for this mode is make it easier to reference and
   enforce specific combinations of algorithms.  The authors envision
   this being useful for client-server negotiated protocols, protocol
   designers who wish to place constraints on allowable algorithm
   combinations in the protocol specification, as well as audited
   environments that wish to prove that only certain combinations will
   be supported by clients.



Ounsworth (Editor), et alExpires August 26, 2022                [Page 7]

Internet-Draft              PQ Composite Keys              February 2022


2.4.  Composite Private Key

   The composite private key data is represented by the following
   structure:

   CompositePrivateKey ::= SEQUENCE SIZE (2..MAX) OF OneAsymmetricKey

   Each element is a OneAsymmetricKey [RFC5958] object for a component
   private key.

   The corresponding AlgorithmIdentifier for a composite private key
   MUST use the id-alg-composite object identifier, and the parameters
   field MUST be absent.

   A CompositePrivateKey MUST contain at least two component private
   keys, and they MUST be in the same order as in the corresponding
   CompositePublicKey.

   EDNOTE: does this also need an explicit version?

2.5.  Encoding Rules

   Many protocol specifications will require that the composite public
   key and composite private key data structures be represented by an
   octet string or bit string.

   When an octet string is required, the DER encoding of the composite
   data structure SHALL be used directly.

   When a bit string is required, the octets of the DER encoded
   composite data structure SHALL be used as the bits of the bit string,
   with the most significant bit of the first octet becoming the first
   bit, and so on, ending with the least significant bit of the last
   octet becoming the last bit of the bit string.

   In the interests of simplicity and avoiding compatibility issues,
   implementations that parse these structures MAY accept both BER and
   DER.

3.  In Practice

   This section addresses practical issues of how this draft affects
   other protocols and standards.

   EDNOTE 10: Possible topics to address:

   o  The size of these certs and cert chains.




Ounsworth (Editor), et alExpires August 26, 2022                [Page 8]

Internet-Draft              PQ Composite Keys              February 2022


   o  In particular, implications for (large) composite keys /
      signatures / certs on the handshake stages of TLS and IKEv2.

   o  If a cert in the chain is a composite cert then does the whole
      chain need to be of composite Certs?

   o  We could also explain that the root CA cert does not have to be of
      the same algorithms.  The root cert SHOULD NOT be transferred in
      the authentication exchange to save transport overhead and thus it
      can be different than the intermediate and leaf certs.

   o  We could talk about overhead (size and processing).

   o  We could also discuss backwards compatibility.

   o  We could include a subsection about implementation considerations.

3.1.  Textual encoding of Composite Private Keys

   CompositePrivateKeys can be encoded to the Privacy-Enhanced Mail
   (PEM) [RFC1421] format by placing a CompositePrivateKey into the
   privateKey field of a PrivateKeyInfo or OneAsymmetricKey object, and
   then applying the PEM encoding rules as defined in [RFC7468] section
   10 and 11 for plaintext and encrypted private keys, respectively.

3.2.  Asymmetric Key Packages (CMS)

   The Cryptographic Message Syntax (CMS), as defined in [RFC5652], can
   be used to digitally sign, digest, authenticate, or encrypt the
   asymmetric key format content type.

   When encoding composite private keys, the privateKeyAlgorithm in the
   OneAsymmetricKey SHALL be set to id-alg-composite.

   The parameters of the privateKeyAlgorithm SHALL be a sequence of
   AlgorithmIdentifier objects, each of which are encoded according to
   the rules defined for each of the different keys in the composite
   private key.

   The value of the privateKey field in the OneAsymmetricKey SHALL be
   set to the DER encoding of the SEQUENCE of private key values that
   make up the composite key.  The number and order of elements in the
   sequence SHALL be the same as identified in the sequence of
   parameters in the privateKeyAlgorithm.

   The value of the publicKey (if present) SHALL be set to the DER
   encoding of the corresponding CompositePublicKey.  If this field is




Ounsworth (Editor), et alExpires August 26, 2022                [Page 9]

Internet-Draft              PQ Composite Keys              February 2022


   present, the number and order of component keys MUST be the same as
   identified in the sequence of parameters in the privateKeyAlgorithm.

   The value of the attributes is encoded as usual.

4.  IANA Considerations

   The ASN.1 module OID is TBD.  The id-composite-key and id-composite-
   or-key OIDs are to be assigned by IANA.  The authors suggest that
   IANA assign an OID on the id-pkix arc:

   id-composite-key OBJECT IDENTIFIER ::= {
       iso(1) identified-organization(3) dod(6) internet(1) security(5)
       mechanisms(5) pkix(7) algorithms(6) composite(??) }

   id-composite-component-key OBJECT IDENTIFIER ::= { TBD }

5.  Security Considerations

5.1.  Reuse of keys in a Composite public key

   There is an additional security consideration that some use cases
   such as signatures remain secure against downgrade attacks if and
   only if component keys are never used outside of their composite
   context and therefore it is RECOMMENDED that component keys in a
   composite key are uniquely generated.  In particular, the components
   of a composite key SHOULD NOT also appear in single-key certificates.
   This is particularly relevant for protocols that use composite keys
   in a logical AND mode since the appearance of the same component keys
   in single-key contexts undermines the binding of the component keys
   into a single composite key.

5.2.  Policy for Deprecated and Acceptable Algorithms

   Traditionally, a public key, certificate, or signature contains a
   single cryptographic algorithm.  If and when an algorithm becomes
   deprecated (for example, RSA-512, or SHA1), it is obvious that
   structures using that algorithm are implicitly revoked.

   In the composite model this is less obvious since a single public
   key, certificate, or signature may contain a mixture of deprecated
   and non-deprecated algorithms.  Moreover, implementers may decide
   that certain cryptographic algorithms have complementary security
   properties and are acceptable in combination even though neither
   algorithm is acceptable by itself.

   Specifying a modified verification process to handle these situations
   is beyond the scope of this draft, but could be desirable as the



Ounsworth (Editor), et alExpires August 26, 2022               [Page 10]

Internet-Draft              PQ Composite Keys              February 2022


   subject of an application profile document, or to be up to the
   discretion of implementers.

   2. Check policy to see whether A1, A2, ..., An constitutes a valid
      combination of algorithms.

      if not checkPolicy(A1, A2, ..., An), then
        output "Invalid signature"

   While intentionally not specified in this document, implementors
   should put careful thought into implementing a meaningful policy
   mechanism within the context of their signature verification engines,
   for example only algorithms that provide similar security levels
   should be combined together.

   EDNOTE 11: Max is working on a CRL mechanism to accomplish this.

5.3.  Protection of Private Keys

   Structures described in this document do not protect private keys in
   any way unless combined with a security protocol or encryption
   properties of the objects (if any) where the CompositePrivateKey is
   used (see next Section).

   Protection of the private keys is vital to public key cryptography.
   The consequences of disclosure depend on the purpose of the private
   key.  If a private key is used for signature, then the disclosure
   allows unauthorized signing.  If a private key is used for key
   management, then disclosure allows unauthorized parties to access the
   managed keying material.  The encryption algorithm used in the
   encryption process must be at least as 'strong' as the key it is
   protecting.

5.4.  Checking for Compromised Key Reuse

   Certificate Authority (CA) implementations need to be careful when
   checking for compromised key reuse, for example as required by
   WebTrust regulations; when checking for compromised keys, you MUST
   unpack the CompositePublicKey structure and compare individual
   component keys.  In other words, for the purposes of key reuse
   checks, the composite public key structures need to be un-packed so
   that primitive keys are being compared.  For example if the composite
   key {RSA1, PQ1} is revoked for key compromise, then the keys RSA1 and
   PQ1 need to be indivitually considered revoked.  If the composite key
   {RSA1, PQ2} is submitted for certification, it SHOULD be rejected
   because the key RSA1 was previously declared compromised even though
   the key PQ2 is unique.




Ounsworth (Editor), et alExpires August 26, 2022               [Page 11]

Internet-Draft              PQ Composite Keys              February 2022


6.  Appendices

6.1.  Creating explicit combinations

   The following ASN.1 Information Objects may be useful in defining and
   parsing explicit pairs of public key types.  Given an ASN.1 2002
   compliant ASN.1 compiler, these Information Objects will enforce the
   binding between the public key types specified in the instantiation
   of pk-explicitComposite, and the wire objects which implement it.
   The one thing that is not enforced automatically by this Information
   Object is that publicKey.params are intended to be absent if and only
   if they are absent for the declared public key type.  This ASN.1
   module declares them OPTIONAL and leaves it to implementors to
   perform this check explicitely.

  -- pk-explicitComposite - Composite public key information object

  pk-explicitComposite{OBJECT IDENTIFIER:id, PUBLIC-KEY:firstPublicKey,
   FirstPublicKeyType, PUBLIC-KEY:secondPublicKey, SecondPublicKeyType}
   PUBLIC-KEY ::= {
      IDENTIFIER id
      KEY ExplicitCompositePublicKey{firstPublicKey, FirstPublicKeyType,
       secondPublicKey, SecondPublicKeyType}
      PARAMS ARE absent
      CERT-KEY-USAGE {digitalSignature, nonRepudiation, keyCertSign,
        cRLSign}
  }

   The following ASN.1 object class then automatically generates the
   public key structure from the types defined in pk-explicitComposite.





















Ounsworth (Editor), et alExpires August 26, 2022               [Page 12]

Internet-Draft              PQ Composite Keys              February 2022


-- ExplicitCompositePublicKey - The data structure for a composite
-- public key sec-alg-identifier and SecondPublicKeyType are needed
-- because PUBLIC-KEY contains a set of public key types, not a single
-- type.
-- TODO The parameters should be optional only if they are marked
-- optional in the PUBLIC-KEY.


ExplicitCompositePublicKey{PUBLIC-KEY:firstPublicKey, FirstPublicKeyType,
  PUBLIC-KEY:secondPublicKey, SecondPublicKeyType} ::= SEQUENCE {
    firstPublicKey SEQUENCE {
        params firstPublicKey.&Params OPTIONAL,
        publicKey FirstPublicKeyType
    },
    secondPublicKey SEQUENCE {
        params secondPublicKey.&Params OPTIONAL,
        publicKey SecondPublicKeyType
    }
}

   Using this module, it becomes trivial to define explicit pairs.  For
   an example, see Section 6.3.2.

   To define explicit triples, quadtuples, etc, these Information
   Objects can be extended to have thirdPublicKey, fourthPublicKey, etc
   throughout.

6.2.  ASN.1 Module

<CODE STARTS>

Composite-Keys-2022
  { TBD }

DEFINITIONS IMPLICIT TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  PUBLIC-KEY, SIGNATURE-ALGORITHM
    FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  SubjectPublicKeyInfo
    FROM PKIX1Explicit-2009
      { iso(1) identified-organization(3) dod(6) internet(1)



Ounsworth (Editor), et alExpires August 26, 2022               [Page 13]

Internet-Draft              PQ Composite Keys              February 2022


        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-explicit-02(51) }

  OneAsymmetricKey
    FROM AsymmetricKeyPackageModuleV1
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) modules(0)
        id-mod-asymmetricKeyPkgV1(50) } ;

--
-- Object Identifiers
--

-- To be replaced by IANA
id-composite-key OBJECT IDENTIFIER ::= {
  iso(1) identified-organization(3) dod(6) internet(1) private(4)
  enterprise(1) OpenCA(18227) algorithms(2) id-pk-compositeCrypto(1) }

id-composite-component-key OBJECT IDENTIFIER ::= { TBD }

--
-- Public Key
--

pk-Composite PUBLIC-KEY ::= {
    IDENTIFIER id-composite-key
    KEY CompositePublicKey
    PARAMS ARE absent
    PRIVATE-KEY CompositePrivateKey
}

CompositePublicKey ::= SEQUENCE SIZE (2..MAX) OF SubjectPublicKeyInfo

CompositePrivateKey ::= SEQUENCE SIZE (2..MAX) OF OneAsymmetricKey


-- pk-explicitComposite - Composite public key information object

pk-explicitComposite{OBJECT IDENTIFIER:id, PUBLIC-KEY:firstPublicKey,
  FirstPublicKeyType, PUBLIC-KEY:secondPublicKey, SecondPublicKeyType}
  PUBLIC-KEY ::= {
    IDENTIFIER id
    KEY ExplicitCompositePublicKey{firstPublicKey, FirstPublicKeyType,
      secondPublicKey, SecondPublicKeyType}
    PARAMS ARE absent
}

   The following ASN.1 object class then automatically generates the



Ounsworth (Editor), et alExpires August 26, 2022               [Page 14]

Internet-Draft              PQ Composite Keys              February 2022


   public key structure from the types defined in pk-explicitComposite.

-- ExplicitCompositePublicKey - The data structure for a composite
-- public key sec-alg-identifier and SecondPublicKeyType are needed
-- because PUBLIC-KEY contains a set of public key types, not a single
-- type.
-- TODO The parameters should be optional only if they are marked
-- optional in the PUBLIC-KEY


ExplicitCompositePublicKey{PUBLIC-KEY:firstPublicKey, FirstPublicKeyType,
  PUBLIC-KEY:secondPublicKey, SecondPublicKeyType} ::= SEQUENCE {
    firstPublicKey SEQUENCE {
        params firstPublicKey.&Params OPTIONAL,
        publicKey FirstPublicKeyType
    },
    secondPublicKey SEQUENCE {
        params secondPublicKey.&Params OPTIONAL,
        publicKey SecondPublicKeyType
    }
}

END

<CODE ENDS>


6.3.  Examples

6.3.1.  Generic Composite Public Key Examples

   This is an example generic composite public key

   -----BEGIN PUBLIC KEY-----
   MIIBmDAMBgorBgEEAYGOMwIBA4IBhgAwggGBMFkwEwYHKoZIzj0CAQYIKoZIzj0D
   AQcDQgAELGrFpFFDsF3WazCa6npSX5ItleWicfFiDBkSumENPA0KSx+kntAIDxXl
   TYMAcoMdEYSUJW3DyXhe42CVFiHXkzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
   AQoCggEBAL9UuDDAEd0iqPNt1fwKUGz2A99ErWBvURBE3PxWxiX+Tl482OZGVdY/
   jIF4d8jPGEVaYo1Hi3QO3JVwctAIOTHSrseozh/dAzBDu23OLBVT61BaZANA6x12
   E07yAl43zuRnvVUg2iFLKDuyMfzohY3yWi+bjyYFcMYW6Fmi3s0NLpa4MmhX1K5S
   9KbmgBrxr2h0U7nlglBEs+HEnpTYItiVzcyyJVBiQ99h6Tc6ZVzV2JwTb0fwhAZL
   89GLe8EFltLFr/bqIt0vm89HAaerMkFR3YwZn+vxSiunNpg9gXrLpksk2WpxIu7Z
   er34NvFTeJj55foy5u5761WrT8yrolkCAwEAAQ==
   -----END PUBLIC KEY-----

   which decodes as:





Ounsworth (Editor), et alExpires August 26, 2022               [Page 15]

Internet-Draft              PQ Composite Keys              February 2022


   algorithm: AlgorithmIdentifier{id-composite-key}

   subjectPublicKey: CompositePublicKey {
       SubjectPublicKeyInfo {
         algorithm: AlgorithmIdentifier {
           algorithm: ecPublicKey
           parameters: prime256v1
           }
         subjectPublicKey: <ec key octet string>
         },
         SubjectPublicKeyInfo {
         algorithm: AlgorithmIdentifier {
           algorithm: rsaEncryption
           parameters: NULL
           }
         subjectPublicKey: <rsa key octet string>
         }
       }

   The corresponding private key is:































Ounsworth (Editor), et alExpires August 26, 2022               [Page 16]

Internet-Draft              PQ Composite Keys              February 2022


   -----BEGIN PRIVATE KEY-----
   MIIFHgIBADAMBgorBgEEAYGOMwIBBIIFCTCCBQUwQQIBADATBgcqhkjOPQIBBggq
   hkjOPQMBBwQnMCUCAQEEILIwxNkjkO+vcqxZrQWDvKrDcH7Johbi7wyHfttTDh8D
   MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC/VLgwwBHdIqjz
   bdX8ClBs9gPfRK1gb1EQRNz8VsYl/k5ePNjmRlXWP4yBeHfIzxhFWmKNR4t0DtyV
   cHLQCDkx0q7HqM4f3QMwQ7ttziwVU+tQWmQDQOsddhNO8gJeN87kZ71VINohSyg7
   sjH86IWN8lovm48mBXDGFuhZot7NDS6WuDJoV9SuUvSm5oAa8a9odFO55YJQRLPh
   xJ6U2CLYlc3MsiVQYkPfYek3OmVc1dicE29H8IQGS/PRi3vBBZbSxa/26iLdL5vP
   RwGnqzJBUd2MGZ/r8UorpzaYPYF6y6ZLJNlqcSLu2Xq9+DbxU3iY+eX6Mubue+tV
   q0/Mq6JZAgMBAAECggEAFMdxJ448gm0otyNHGZPPLz46pm1RfQcp4R/xdhBAfdDU
   FwT5s2yRFu8Y5di8/ZiMNL//swNBoG2axDoNpg02lPQiGjn5hNleZsf8W40IGZrf
   E/91HCtZPX5c03aSDkR2WjTwCYZDWllMucr9BdAE7SkUZVY6IjF2EXVcb5uyIcer
   9mG62UWvrt2vLgJP6nwkMGM9eSaYcKZ/f2g1gYhbqUbdvWWRqsY5g6oBHGS9VpGh
   jgjxujTVmaWHWXikR/RnD7xb+f8cyaZt9eRSqbL9kx6qVoK2LOAviBGLnZ0h4k8P
   AF1OcDyQcrGgLKw4q0WItFBdW//Hyf3SBoMb+jeEJwKBgQDxYTdyuaUUe/mdGN3q
   CWgVA9vx6d+7tV4ehca+kDeOfsqwXNPx5hWq295+g7rfl6L/xzy0vWj7TebWtmX8
   2xjl325Rn9R5v8fFxUNj29jkaoB/l01+FQ0PWUj7nTiQ6I8MKZNFclwHM0sjdbdw
   xSjBPF1OcO+15jDZdQzdPOd/GwKBgQDK63TfApwOiExtj2HzW6WZAdSdbtXdE3d0
   uNpS+uckIHEkJ0rEWkeNRjb5v5IXbaeFj2vSwowAQnPJ5RHCIuIZID/yJ5Fu5Ef2
   +VU5oBjmFhzBvgROmRqiXRMfjKlZHQnAJthHknlA8y1pq0IAsTQ7BuXxGcHzA6re
   gOwMVGbXmwKBgQCaiSkctCoyMSUgJNl+isMuIShheuAYpwc492DEhERtYFOYEfZH
   eo0ItHd//ApaOBTNONtuw41AxyEw+dnVxtfr494XOAKqZ9QYlDCO8COuKVlXVqDw
   Rb30w67sGD4s2BctLDjzT0IIAhjq/OSSuEddX65FGB0AEf3YWw3/Xoy/XQKBgGQ0
   T7tMw5mdjvhPZNRS/nyHXeH8eJm6YjP+kLmHcxrw9k4fJRm/ZzQJZ15/TnpJSP94
   aotiTNZX+mvJtbJDnZlAxrMi/PtguXTpfT9+oq0EYGEAH4pcqr1g7u+We44o+8aq
   qAT3/O6o51UWH/rNhvhbGLOtv4vs1LUZvvb7uulfAoGBANn5QBWoCs+ka70lGzq2
   GQqVB0MB3IY12HKm8RhKCdHctDOO2fWJIrDBIqYxmFIBR/w8gt10gAYAzqG1/ofY
   p96mWqbV0dgPVS1/MvNgi1Y17XnqRlpgxdvDxh8W51j+aSUUbw9tRtOouhRwmSxv
   njZssvGOfmVc2W3hY4I+t1w0
   -----END PRIVATE KEY-----

   TODO: decode the priv key.

6.3.2.  Explitic Composite Public Key Examples

   -- Modify the Generic example as if it had a registered pairwise OID

   Assume that the following is a defined explicit pair:

   id-pk-example-ECandRSA OBJECT IDENTIFIER ::= { 1 2 3 4 }

   pk-example-ECandRSA PUBLIC-KEY ::= pk-explicitComposite{
       id-pk-example-ECandRSA,
       ecPublicKey,
       pk-ec,
       rsaEncryption,
       pk-rsa,
   }



Ounsworth (Editor), et alExpires August 26, 2022               [Page 17]

Internet-Draft              PQ Composite Keys              February 2022


   Then the same key as above could be encoded as an explicit composite
   public key as:

 TODO: PEM
   Can't actually encode this because we haven't listed an OID value for
   id-composite-component-key.

   which decodes as:

   algorithm: AlgorithmIdentifier{id-pk-example-ECandRSA}

   subjectPublicKey: CompositePublicKey {
       SubjectPublicKeyInfo {
         algorithm: AlgorithmIdentifier {
           algorithm: id-composite-component-key
           parameters: prime256v1
           }
         subjectPublicKey: <ec key octet string>
         },
         SubjectPublicKeyInfo {
         algorithm: AlgorithmIdentifier {
           algorithm: id-composite-component-key
           parameters: NULL
           }
         subjectPublicKey: <rsa key octet string>
         }
       }

   The private key is identical for generic and explicit and so does not
   need to be repeated.

   ENDNOTE: should they be identical?

6.4.  Intellectual Property Considerations

   The following IPR Disclosure relates to this draft:

   https://datatracker.ietf.org/ipr/3588/

7.  Contributors and Acknowledgements

   This document incorporates contributions and comments from a large
   group of experts.  The Editors would especially like to acknowledge
   the expertise and tireless dedication of the following people, who
   attended many long meetings and generated millions of bytes of
   electronic mail and VOIP traffic over the past year in pursuit of
   this document:




Ounsworth (Editor), et alExpires August 26, 2022               [Page 18]

Internet-Draft              PQ Composite Keys              February 2022


   John Gray (Entrust), Serge Mister (Entrust), Scott Fluhrer (Cisco
   Systems), Panos Kampanakis (Cisco Systems), Daniel Van Geest (ISARA),
   Tim Hollebeek (Digicert), Klaus-Dieter Wirth (D-Trust), and Francois
   Rousseau.

   We are grateful to all, including any contributors who may have been
   inadvertently omitted from this list.

   This document borrows text from similar documents, including those
   referenced below.  Thanks go to the authors of those documents.
   "Copying always makes things easier and less error prone" -
   [RFC8411].

7.1.  Making contributions

   Additional contributions to this draft are weclome.  Please see the
   working copy of this draft at, as well as open issues at:

   https://github.com/EntrustCorporation/draft-ounsworth-pq-composite-
   keys

8.  References

8.1.  Normative References

   [RFC1421]  Linn, J., "Privacy Enhancement for Internet Electronic
              Mail: Part I: Message Encryption and Authentication
              Procedures", RFC 1421, DOI 10.17487/RFC1421, February
              1993, <https://www.rfc-editor.org/info/rfc1421>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/info/rfc2986>.

   [RFC4210]  Adams, C., Farrell, S., Kause, T., and T. Mononen,
              "Internet X.509 Public Key Infrastructure Certificate
              Management Protocol (CMP)", RFC 4210,
              DOI 10.17487/RFC4210, September 2005,
              <https://www.rfc-editor.org/info/rfc4210>.






Ounsworth (Editor), et alExpires August 26, 2022               [Page 19]

Internet-Draft              PQ Composite Keys              February 2022


   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/info/rfc5280>.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/info/rfc5652>.

   [RFC5914]  Housley, R., Ashmore, S., and C. Wallace, "Trust Anchor
              Format", RFC 5914, DOI 10.17487/RFC5914, June 2010,
              <https://www.rfc-editor.org/info/rfc5914>.

   [RFC5958]  Turner, S., "Asymmetric Key Packages", RFC 5958,
              DOI 10.17487/RFC5958, August 2010,
              <https://www.rfc-editor.org/info/rfc5958>.

   [RFC7468]  Josefsson, S. and S. Leonard, "Textual Encodings of PKIX,
              PKCS, and CMS Structures", RFC 7468, DOI 10.17487/RFC7468,
              April 2015, <https://www.rfc-editor.org/info/rfc7468>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8411]  Schaad, J. and R. Andrews, "IANA Registration for the
              Cryptographic Algorithm Object Identifier Range",
              RFC 8411, DOI 10.17487/RFC8411, August 2018,
              <https://www.rfc-editor.org/info/rfc8411>.

   [X.690]    ITU-T, "Information technology - ASN.1 encoding Rules:
              Specification of Basic Encoding Rules (BER), Canonical
              Encoding Rules (CER) and Distinguished Encoding Rules
              (DER)", ISO/IEC 8825-1:2015, November 2015.

8.2.  Informative References

   [Bindel2017]
              Bindel, N., Herath, U., McKague, M., and D. Stebila,
              "Transitioning to a quantum-resistant public key
              infrastructure", 2017, <https://link.springer.com/
              chapter/10.1007/978-3-319-59879-6_22>.

   [I-D.ounsworth-pq-composite-sigs]
              Ounsworth, M. and M. Pala, "Composite Signatures For Use
              In Internet PKI", draft-ounsworth-pq-composite-sigs-05
              (work in progress), July 2021.



Ounsworth (Editor), et alExpires August 26, 2022               [Page 20]

Internet-Draft              PQ Composite Keys              February 2022


Authors' Addresses

   Mike Ounsworth
   Entrust Limited
   2500 Solandt Road -- Suite 100
   Ottawa, Ontario  K2K 3G5
   Canada

   Email: mike.ounsworth@entrust.com


   Massimiliano Pala
   CableLabs

   Email: director@openca.org


   Jan Klaussner
   D-Trust GmbH
   Kommandantenstr. 15
   Berlin  10969
   Germany

   Email: jan.klaussner@d-trust.net



























Ounsworth (Editor), et alExpires August 26, 2022               [Page 21]
